#include <iostream>
#include "glut.h"
using namespace std;

#define X .525731112119133606//se definen las variables para los vertrices
#define Z .850650808352039932

int dat = 0, selec = 0, col = 0, cosa = 0, depth = 0;

GLfloat cop_x = 5.0;//variables para la poscicion de la camara
GLfloat cop_y = 6.0;
GLfloat cop_z = 5.0;
GLfloat angulo = 5, Sx = 1, cont2 = 1, cont;//variables para animacion de la figura 
GLfloat trasladar = -5;
GLfloat trasladarvuelta = 5;
GLfloat d1[3];//se inicializan 3 vectores
GLfloat d2[3];
GLfloat n[3];

GLfloat light_ambient[] = { 0.5 , 0.5 , 0.5 , 1.0 };//recibe valores RGB para las sombras
GLfloat light_diffuse[] = { 0.5 , 0.5 , 0.5 , 1.0 };//recibe valores RGB para medios tonos
GLfloat light_specular[] = { 0.5 , 0.5 , 0.5 , 1.0 };//recibe valores RBG para Luces
GLfloat light_position[] = { -15.0 , 18.0 , 15.0 , 1.0 };//recibe poscicion para luz1
GLfloat light_position1[] = { 15.0 , 18.0 , -15.0 , 1.0 };//recibe poscicion para luz2
GLfloat light_position2[] = { 15.0 , -18.0 , -15.0 , 1.0 };//recibe poscicion para luz3
GLfloat light_direccion[] = { -1.0 , 1.0 , -1.0 ,0.0 };//recibe direccion para las luces

GLfloat ambient[] = { 0.2 , 0.2 , 0.2 , 1.0 };
GLfloat mat_d[] = { 0.2 , 0.2, 0.2 , 1.0 };
GLfloat mat_s[] = { 0.9 , 0.9 , 0.9 , 1.0 };
GLfloat low_sh[] = { 5.0 };
GLfloat high_sh[] = { 50.0 };//variables para aplicar material
GLfloat global_ambient[] = { 0.3 , 0.3 , 0.3 , 1.0 };

static GLfloat ydata[12][3] = {//matiz para guardar los vertices de la figura 
	{-X, 0, Z}, { X,0,Z }, { -X,0,-Z }, { X,0,-Z },
	{ 0,Z,X }, { 0,Z,-X }, { 0,-Z,X },  { 0,-Z,-X },
	{ Z,X,0 }, { -Z,X,0 }, { Z,-X,0 },  { -Z,-X,0 }
};
static GLuint tindices[20][3] = {//matriz para guardar las caras de la figura 
 {1,4,0},{4,9,0},{4,9,5},{8,5,4},{1,8,4},
 {1,10,8},{10,3,8},{8,3,5},{3,2,5},{3,7,2},
 {3,10,7},{10,6,7},{6,11,7},{6,0,11},{6,1,0},
 {10,1,6},{11,0,9},{2,11,9},{5,2,9},{11,2,7}
};
void init(void)
{
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glEnable(GL_DEPTH_TEST);
}
void smooth()
{
	glLightModelfv(GL_LIGHT_MODEL_AMBIENT, global_ambient);//aplica una iluminacion ambiente 

	glLightf(GL_LIGHT0, GL_CONSTANT_ATTENUATION, 1.2);
	glLightf(GL_LIGHT0, GL_LINEAR_ATTENUATION, 0.0);
	glLightf(GL_LIGHT0, GL_QUADRATIC_ATTENUATION, 0.0);
	glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);//situa las sombras en la escena 
	glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);//situa los medios tonos en la escena
	glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);//situa las luces en la escena 
	glLightfv(GL_LIGHT0, GL_POSITION, light_position);//recibe la poscion de la lampara 
	glLightfv(GL_LIGHT0, GL_SPOT_DIRECTION, light_direccion);//direccion de la luz
	glEnable(GL_LIGHT0);//habilita la luz1
	glLightf(GL_LIGHT2, GL_CONSTANT_ATTENUATION, 1.2);
	glLightf(GL_LIGHT2, GL_LINEAR_ATTENUATION, 0.0);
	glLightf(GL_LIGHT2, GL_QUADRATIC_ATTENUATION, 0.0);
	glLightfv(GL_LIGHT2, GL_AMBIENT, light_ambient);//situa las sombras en la escena 
	glLightfv(GL_LIGHT2, GL_DIFFUSE, light_diffuse);//situa los medios tonos en la escena
	glLightfv(GL_LIGHT2, GL_SPECULAR, light_specular);//situa las luces en la escena 
	glLightfv(GL_LIGHT2, GL_POSITION, light_position1);//recibe la poscion de la lampara 
	glLightfv(GL_LIGHT2, GL_SPOT_DIRECTION, light_direccion);//direccion de la luz
	glEnable(GL_LIGHT2);//habilita la luz2
	glLightf(GL_LIGHT3, GL_CONSTANT_ATTENUATION, 1.2);
	glLightf(GL_LIGHT3, GL_LINEAR_ATTENUATION, 0.0);
	glLightf(GL_LIGHT3, GL_QUADRATIC_ATTENUATION, 0.0);
	glLightfv(GL_LIGHT3, GL_AMBIENT, light_ambient);//situa las sombras en la escena 
	glLightfv(GL_LIGHT3, GL_DIFFUSE, light_diffuse);//situa los medios tonos en la escena
	glLightfv(GL_LIGHT3, GL_SPECULAR, light_specular);//situa las luces en la escena 
	glLightfv(GL_LIGHT3, GL_POSITION, light_position2);//recibe la poscion de la luz
	glLightfv(GL_LIGHT3, GL_SPOT_DIRECTION, light_direccion);//direccion de la luz
	glEnable(GL_LIGHT3);//habilita la luz3

	//LAMPARA
	GLfloat direccion[] = { 0 , 0, 0 };//vector de direccion 
	GLfloat poscion[] = { 20 , 20 , 20 };//vector de la poscicion 
	glLightfv(GL_LIGHT1, GL_POSITION, poscion);//recibe la poscion de la lampara 
	glLightfv(GL_LIGHT1, GL_SPOT_DIRECTION, direccion);//recibe la direccion donde apunta la lampara
	glLightf(GL_LIGHT1, GL_SPOT_CUTOFF, 60.0);//recibe el angulo de apertura de la lampara 
	glLightf(GL_LIGHT1, GL_SPOT_EXPONENT, 1);
	glEnable(GL_LIGHT1);//habilita la lampara

	glEnable(GL_LIGHTING);//habilita la luz ambiente

	glMaterialfv(GL_FRONT, GL_AMBIENT, ambient);
	glMaterialfv(GL_FRONT, GL_SPECULAR, mat_s);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_d);
	glMaterialfv(GL_FRONT, GL_SHININESS, low_sh);
	//glMaterialfv(GL_FRONT, GL_SHININESS, high_sh);
	glEnable(GL_COLOR_MATERIAL);
	glShadeModel(GL_SMOOTH);//aplica sombras suaves a la figura 
	glEnable(GL_DEPTH_TEST);
}
void flat()
{
	glLightModelfv(GL_LIGHT_MODEL_AMBIENT, global_ambient);//aplica una iluminacion ambiente 

	glLightf(GL_LIGHT0, GL_CONSTANT_ATTENUATION, 1.2);
	glLightf(GL_LIGHT0, GL_LINEAR_ATTENUATION, 0.0);
	glLightf(GL_LIGHT0, GL_QUADRATIC_ATTENUATION, 0.0);
	glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);//situa las sombras en la escena 
	glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);//situa los medios tonos en la escena
	glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);//situa las luces en la escena 
	glLightfv(GL_LIGHT0, GL_POSITION, light_position);//recibe la poscion de la lampara 
	glLightfv(GL_LIGHT0, GL_SPOT_DIRECTION, light_direccion);//direccion de la luz
	glEnable(GL_LIGHT0);//habilita la luz1
	glLightf(GL_LIGHT2, GL_CONSTANT_ATTENUATION, 1.2);
	glLightf(GL_LIGHT2, GL_LINEAR_ATTENUATION, 0.0);
	glLightf(GL_LIGHT2, GL_QUADRATIC_ATTENUATION, 0.0);
	glLightfv(GL_LIGHT2, GL_AMBIENT, light_ambient);//situa las sombras en la escena 
	glLightfv(GL_LIGHT2, GL_DIFFUSE, light_diffuse);//situa los medios tonos en la escena
	glLightfv(GL_LIGHT2, GL_SPECULAR, light_specular);//situa las luces en la escena 
	glLightfv(GL_LIGHT2, GL_POSITION, light_position1);//recibe la poscion de la lampara 
	glLightfv(GL_LIGHT2, GL_SPOT_DIRECTION, light_direccion);//direccion de la luz
	glEnable(GL_LIGHT2);//habilita la luz2
	glLightf(GL_LIGHT3, GL_CONSTANT_ATTENUATION, 1.2);
	glLightf(GL_LIGHT3, GL_LINEAR_ATTENUATION, 0.0);
	glLightf(GL_LIGHT3, GL_QUADRATIC_ATTENUATION, 0.0);
	glLightfv(GL_LIGHT3, GL_AMBIENT, light_ambient);//situa las sombras en la escena 
	glLightfv(GL_LIGHT3, GL_DIFFUSE, light_diffuse);//situa los medios tonos en la escena
	glLightfv(GL_LIGHT3, GL_SPECULAR, light_specular);//situa las luces en la escena 
	glLightfv(GL_LIGHT3, GL_POSITION, light_position2);//recibe la poscion de la luz
	glLightfv(GL_LIGHT3, GL_SPOT_DIRECTION, light_direccion);//direccion de la luz
	glEnable(GL_LIGHT3);//habilita la luz2

	//LAMPARA
	GLfloat direccion[] = { 0 , 0, 0 };//vector de direccion 
	GLfloat poscion[] = { 20 , 20 , 20 };//vector de la poscicion 
	glLightfv(GL_LIGHT1, GL_POSITION, poscion);//recibe la poscion de la lampara 
	glLightfv(GL_LIGHT1, GL_SPOT_DIRECTION, direccion);//recibe la direccion donde apunta la lampara
	glLightf(GL_LIGHT1, GL_SPOT_CUTOFF, 180.0);//recibe el angulo de apertura de la lampara 
	glLightf(GL_LIGHT1, GL_SPOT_EXPONENT, 1);

	glEnable(GL_LIGHT1);//habilita la lampara
	glEnable(GL_LIGHTING);//habilita la luz ambiente

	glMaterialfv(GL_FRONT, GL_AMBIENT, ambient);
	glMaterialfv(GL_FRONT, GL_SPECULAR, mat_s);
	glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_d);
	glMaterialfv(GL_FRONT, GL_SHININESS, low_sh);
	//glMaterialfv(GL_FRONT, GL_SHININESS, high_sh);
	glEnable(GL_COLOR_MATERIAL);
	glShadeModel(GL_FLAT);//aplica sombras poligonales
	glEnable(GL_DEPTH_TEST);
}
void normalize(float y[3])
{
	GLfloat d = sqrt(y[0] * y[0] + y[1] * y[1] + y[2] * y[2]);//define la magnitud del vector 
	y[0] /= d;//componente de la normal 
	y[1] /= d;//componente de la normal 
	y[2] /= d;//componente de la normal 
	glNormal3fv(y);//funcion para hallar la normal de las componentes anteriores 
}
void normCrossProd(float u[3], float y[3], float out[3]) {
	out[0] = u[1] * y[2] - u[2] * y[1];//prducto curz entre componentes de los vectores
	out[1] = u[2] * y[0] - u[0] * y[2];//prducto curz entre componentes de los vectores
	out[2] = u[0] * y[1] - u[1] * y[0];//prducto curz entre componentes de los vectores
	normalize(out);//llamado de la funcion para las normales y como parametro el vector (out) 
}
void icoNormVec(int i) {

	for (int k = 0; k < 3; k++) {
		d1[k] = ydata[tindices[i][0]][k] - ydata[tindices[i][1]][k];//resta del primer vertice y el segundo 
		d2[k] = ydata[tindices[i][1]][k] - ydata[tindices[i][2]][k];//resta del segundo y tercer vertice
	}
	normCrossProd(d1, d2, n);//se envian parametros para realizar el producto cruz 
	glNormal3fv(n);//funcion para hallar la normal
}
void drawTriangle(GLfloat y1[3], GLfloat y2[3], GLfloat y3[3])
{
	glBegin(GL_TRIANGLES);//llamado para comenzar a dibujar triangulos 
	glVertex3fv(y1);
	glVertex3fv(y2);
	glVertex3fv(y3);//grafica vertices
	glEnd();
}
void subdivide(GLfloat y1[3], GLfloat y2[3], GLfloat y3[3], int depth)
{
	GLfloat v12[3], v23[3], v31[3];//inicializacion de vectores
	if (depth >= 0) {//condicional para limitar la funcion 
		if (depth == 0)//condicinal para graficar
		{
			drawTriangle(y1, y2, y3);//llamado a la funcion de graficar
		}
		for (int i = 0; i < 3; i++)//ciclo en el que se opera para promediar los vertices
		{
			v12[i] = (y1[i] + y2[i]) / 2.0;
			v23[i] = (y2[i] + y3[i]) / 2.0;
			v31[i] = (y3[i] + y1[i]) / 2.0;
		}
		normalize(v12);//llamado a la fucion para la normal de el vector
		normalize(v23);
		normalize(v31);
		subdivide(y1, v12, v31, depth - 1);
		subdivide(y2, v23, v12, depth - 1);
		subdivide(y3, v31, v23, depth - 1);
		subdivide(v12, v23, v31, depth - 1);
	}
}
void figura()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);//limpia tanto el color como lo profundo del bit
	if (trasladar < 5)//condicional para trasladar
	{
		glTranslated(0, trasladar, 0);//funcionpara trasladar con respecto al tiempo 
		glScalef(Sx, Sx, Sx);//funcionpara escalar con respecto al tiempo 
		glBegin(GL_TRIANGLES);//incializacion para dibujar triangulos 
		for (int i = 0; i <= 20; i++)//ciclo para graficar las 20 caras del icosaedro
		{
			icoNormVec(i);//halla la normal de cada cara de lafigura
			if (i == 0 || i == 3 || i == 6 || i == 9 || i == 12 || i == 15 || i == 18) {//condicional para pintar cada cara del color deseado
				glColor3f(1, 0.9, 0.8);//perla
			}
			if (i == 1 || i == 4 || i == 7 || i == 10 || i == 13 || i == 16 || i == 19) {
				glColor3f(1, 0.1, 0);//ruby
			}
			if (i == 2 || i == 5 || i == 8 || i == 11 || i == 14 || i == 17 || i == 20) {
				glColor3f(0.2, 0.9, 1);//turquesa
			}
			glVertex3fv(&ydata[tindices[i][0]][0]);//grafica las caras de la figura
			glVertex3fv(&ydata[tindices[i][1]][0]);
			glVertex3fv(&ydata[tindices[i][2]][0]);
		}

	}
	else if (trasladar >= 5 && trasladarvuelta > -5)//condicional para regresar la figura a la poscicion inicial
	{
		glTranslated(0, trasladarvuelta, 0);
		glScalef(Sx, Sx, Sx);
		glBegin(GL_TRIANGLES);
		for (int i = 0; i <= 20; i++)
		{
			icoNormVec(i);
			if (i == 0 || i == 3 || i == 6 || i == 9 || i == 12 || i == 15 || i == 18) {//condicional para pintar cada cara del color deseado
				glColor3f(1, 0.9, 0.8);//perla
			}
			if (i == 1 || i == 4 || i == 7 || i == 10 || i == 13 || i == 16 || i == 19) {
				glColor3f(1, 0.1, 0);//ruby
			}
			if (i == 2 || i == 5 || i == 8 || i == 11 || i == 14 || i == 17 || i == 20) {
				glColor3f(0.2, 0.9, 1);//turquesa
			}
			glVertex3fv(&ydata[tindices[i][0]][0]);
			glVertex3fv(&ydata[tindices[i][1]][0]);
			glVertex3fv(&ydata[tindices[i][2]][0]);
		}
	}
	if (cosa == 1)//condicional para elegir entre sombras suaves/lisas o poligonales
	{
		flat();
	}
	if (cosa == 2)
	{
		smooth();
	}
}
void figura2()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);//limpia tanto el color como lo profundo del bit

	if (trasladar < 5)//condicional para trasladar
	{
		glTranslated(0, trasladar, 0);//funcion para trasladar con respecto al tiempo 
		glScalef(Sx, Sx, Sx);//funcion para escalar con respecto al tiempo 
		glBegin(GL_TRIANGLES);//funcion para comenzar a graficar triangulos 
		for (int i = 0; i < 20; i++)
		{
			if (i == 0 || i == 3 || i == 6 || i == 9 || i == 12 || i == 15 || i == 18) {//condicional para pintar cada cara del color deseado
				glColor3f(1, 0.9, 0.8);//perla
			}
			if (i == 1 || i == 4 || i == 7 || i == 10 || i == 13 || i == 16 || i == 19) {
				glColor3f(1, 0.1, 0);//ruby
			}
			if (i == 2 || i == 5 || i == 8 || i == 11 || i == 14 || i == 17 || i == 20) {
				glColor3f(0.2, 0.9, 1);//turquesa
			}
			glNormal3fv(&ydata[tindices[i][0]][0]);//halla la normal de las caras del icosaedro
			glNormal3fv(&ydata[tindices[i][1]][0]);
			glNormal3fv(&ydata[tindices[i][2]][0]);
			glVertex3fv(&ydata[tindices[i][0]][0]);//grafica las caras del icosaedro
			glVertex3fv(&ydata[tindices[i][1]][0]);
			glVertex3fv(&ydata[tindices[i][2]][0]);
		}
	}
	else if (trasladar >= 5 && trasladarvuelta > -5)//condicional para trasladar el objeto a su origen
	{
		glTranslated(0, trasladarvuelta, 0);
		glScalef(Sx, Sx, Sx);
		glBegin(GL_TRIANGLES);
		for (int i = 0; i < 20; i++)
		{
			if (i == 0 || i == 3 || i == 6 || i == 9 || i == 12 || i == 15 || i == 18) {//condicional para pintar cada cara del color deseado
				glColor3f(1, 0.9, 0.8);//perla
			}
			if (i == 1 || i == 4 || i == 7 || i == 10 || i == 13 || i == 16 || i == 19) {
				glColor3f(1, 0.1, 0);//ruby
			}
			if (i == 2 || i == 5 || i == 8 || i == 11 || i == 14 || i == 17 || i == 20) {
				glColor3f(0.2, 0.9, 1);//turquesa
			}
			glNormal3fv(&ydata[tindices[i][0]][0]);
			glNormal3fv(&ydata[tindices[i][1]][0]);
			glNormal3fv(&ydata[tindices[i][2]][0]);
			glVertex3fv(&ydata[tindices[i][0]][0]);
			glVertex3fv(&ydata[tindices[i][1]][0]);
			glVertex3fv(&ydata[tindices[i][2]][0]);
		}
	}
	if (cosa == 1)//condicional para elegir entre sombras suaves/lisas o poligonales
	{
		flat();
	}
	if (cosa == 2)
	{
		smooth();
	}
}
void hola()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);//limpia tanto el color como lo profundo del bit
	if (trasladar < 5)//condicional para trasladar
	{
		glTranslated(0, trasladar, 0);//funcion para trasladar con respecto al tiempo 
		glScalef(Sx, Sx, Sx);//funcion para escalar con respecto al tiempo 

		for (int i = 0; i < 20; i++)
		{
			if (i == 0 || i == 3 || i == 6 || i == 9 || i == 12 || i == 15 || i == 18) {//condicional para pintar cada cara del color deseado
				glColor3f(1, 0.9, 0.8);//perla
			}
			if (i == 1 || i == 4 || i == 7 || i == 10 || i == 13 || i == 16 || i == 19) {
				glColor3f(1, 0.1, 0);//ruby
			}
			if (i == 2 || i == 5 || i == 8 || i == 11 || i == 14 || i == 17 || i == 20) {
				glColor3f(0.2, 0.9, 1);//turquesa
			}
			subdivide(&ydata[tindices[i][0]][0], &ydata[tindices[i][1]][0], &ydata[tindices[i][2]][0], depth);//envia vertices con el valor de la variable depth dada por el usuario a la funcion
		}
	}
	else if (trasladar >= 5 && trasladarvuelta > -5)
	{
		glTranslated(0, trasladarvuelta, 0);//funcion para trasladar con respecto al tiempo 
		glScalef(Sx, Sx, Sx);//funcion para escalar con respecto al tiempo 
		for (int i = 0; i < 20; i++)
		{
			if (i == 0 || i == 3 || i == 6 || i == 9 || i == 12 || i == 15 || i == 18) {//condicional para pintar cada cara del color deseado
				glColor3f(1, 0.9, 0.8);//perla
			}
			if (i == 1 || i == 4 || i == 7 || i == 10 || i == 13 || i == 16 || i == 19) {
				glColor3f(1, 0.1, 0);//ruby
			}
			if (i == 2 || i == 5 || i == 8 || i == 11 || i == 14 || i == 17 || i == 20) {
				glColor3f(0.2, 0.9, 1);//turquesa
			}
			subdivide(&ydata[tindices[i][0]][0], &ydata[tindices[i][1]][0], &ydata[tindices[i][2]][0], depth);//envia vertices con el valor de la variable depth dada por el usuario a la funcion
		}
	}
	if (cosa == 1)//condicional para elegir entre sombras suaves/lisas o poligonales
	{
		flat();
	}
	if (cosa == 2)
	{
		smooth();
	}
	glFlush();
}
void display(void)
{
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(cop_x, cop_y, cop_z, 0.0, 1.5, 0.0, 0.0, 1.0, 0.0);
	glRotatef(angulo, 0, 1, 0);//funcion de rotacion con respecto al tiempo 
	switch (dat)
	{
	case 1:
		figura();//llamado a la funcion del punto 1
		break;
	case 2:
		figura2();//llamado a la funcion del punto 2
		break;
	case 3:
		hola();//llamado a la funcion del punto 3
		break;
	default:
		break;
	}
	glEnd();
	glFlush();
	GLfloat emission[] = { 0.1 , 0.1, 0.1 , 1.0 };
	glMaterialfv(GL_FRONT_AND_BACK, GL_EMISSION, emission);
}
void reshape(int w, int h)
{
	glViewport(0, 0, (GLsizei)w, (GLsizei)h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(60.0, (float)w / (float)h, 1.0, 300.0);
	glFlush();
}
void OnTimerGL2(int id)
{
	cont += 0.1;//aumetnro de contador para trasladar 
	angulo += 0.5;//aumetnro de contador para rotar
	if (angulo > 360)
	{
		angulo = 0;
	}
	if (trasladar <= 5)//desde la posicion inicial hasta la final
	{
		trasladar += 0.1;
	}
	if (trasladar >= 5 && trasladarvuelta >= -5)//desde la posicion finañ devuelta a la inicial
	{
		trasladarvuelta -= 0.1;
	}
	if (cont > 20)//limita el contador para trasladar el objeto el timepo deseado
	{
		cont = 0;//inicializa todas las variables correspondientes a su valor inicial
		trasladar = -5;
		trasladarvuelta = 5;
	}
	glutPostRedisplay();
	glutTimerFunc(10, OnTimerGL2, 1);
}
void OnTimerGL(int id) {
	cont2 += 0.01;//contador para escalar el objeto
	if (cont2 < 3)
	{
		Sx += 0.001;
	}
	else if (cont2 > 3 && Sx > 1)
	{
		Sx -= 0.001;
	}
	else if (cont2 > 5)//limita el contador para escalar el objeto el timepo deseado
	{
		cont2 = 1;//inicializa todas las variables correspondientes a su valor inicial
		Sx = 1;
	}
	glutPostRedisplay();
	glutTimerFunc(10, OnTimerGL, 1);
}
void menu1(int selection)
{
	selec = selection;
	switch (selec)
	{
	case 1:
		dat = 1;//seleccion de punto 1
		cosa = 1;//seleccion de tipo de sombras
		trasladar = -5;//asigna el valor inicial a las variables para que siempre empieze en el mismo lugar
		trasladarvuelta = 5;
		cont = 0;
		display();
		break;
	case 2:
		dat = 1;//seleccion de punto 1
		cosa = 2;//seleccion de tipo de sombras
		trasladar = -5;//asigna el valor inicial a las variables para que siempre empieze en el mismo lugar
		trasladarvuelta = 5;
		cont = 0;
		display();
		break;
	default:
		break;
	}
}
void menu2(int selection)
{
	selec = selection;
	switch (selec)
	{
	case 1:
		dat = 2;//señeccion de punto 2
		cosa = 1;//seleccion de tipo de sombras
		trasladar = -5;//asigna el valor inicial a las variables para que siempre empieze en el mismo lugar
		trasladarvuelta = 5;
		cont = 0;
		display();
		break;
	case 2:
		dat = 2;//señeccion de punto 2
		cosa = 2;//seleccion de tipo de sombras
		trasladar = -5;//asigna el valor inicial a las variables para que siempre empieze en el mismo lugar
		trasladarvuelta = 5;
		cont = 0;
		display();
		break;
	default:
		break;
	}
}
void menu3(int selection)
{
	selec = selection;
	switch (selec)
	{
	case 1:
		dat = 3;//señeccion de punto 3
		cosa = 1;//seleccion de tipo de sombras
		cout << "depth" << endl;
		cin >> depth;//ingreso por el usuario de la variable de profundidad depth
		display();
		break;
	case 2:
		dat = 3;//señeccion de punto 3
		cosa = 2;//seleccion de tipo de sombras
		cout << "depth" << endl;
		cin >> depth;//ingreso por el usuario de la variable de profundidad depth
		display();
		break;

	default:
		break;
	}
}
int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA | GLUT_DEPTH);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("TALLER FINAL");
	int submenu = glutCreateMenu(menu1);//Submenú1
	glutAddMenuEntry("GL_FLAT", 1);
	glutAddMenuEntry("GL_SMOOTH", 2);
	glutCreateMenu(menu1);
	int submenu1 = glutCreateMenu(menu2);//Submenú2
	glutAddMenuEntry("GL_FLAT", 1);
	glutAddMenuEntry("GL_SMOOTH", 2);
	glutCreateMenu(menu2);
	int submenu2 = glutCreateMenu(menu3);//Submenú3
	glutAddMenuEntry("GL_FLAT", 1);
	glutAddMenuEntry("GL_SMOOTH", 2);
	glutCreateMenu(menu3);
	glutAddSubMenu("Punto 1.", submenu);
	glutAddSubMenu("Punto 2.", submenu1);
	glutAddSubMenu("Punto 3.", submenu2);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
	init();
	glutTimerFunc(1, OnTimerGL2, 1);
	glutTimerFunc(1, OnTimerGL, 1);
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutMainLoop();
	return 0;
}